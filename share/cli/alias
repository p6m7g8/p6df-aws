[toplevel]

whoami =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_sts_whoami
  }; f

list-org-accounts =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_organizations_accounts_list
  }; f

list-amis =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_ec2_amis_list
  }; f

bucket-policy =
  !f() {
    local bucket="$1"

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_s3_bucket_policy "$bucket" | python -mjson.tool
  }; f

list-bucket =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_s3_bucket_list
  }; f

list-role-policies =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_iam_role_policies
  }; f

list-roles =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_iam_roles_list
  }; f

list-users =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_iam_users_list
  }; f

list-vpcs =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_ec2_vpcs_list
  }; f

list-subnets =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_ec2_subnets_list
  }; f

list-sgs =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_ec2_sgs_list
  }; f

show-sg =
  !f() {
    local security_group_id="$1"

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_ec2_sg_show "$security_group_id"
  }; f

list-instances =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_ec2_instances_list
  }; f

list-enis =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_ec2_eni_list
  }; f

list-ebs =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_ec2_volumes_list
  }; f

list-cfts =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_cloudformation_list
  }; f

list-asgs =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_autoscaling_asgs_list
  }; f

list-asg-act =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_autoscaling_asg_act_list "$@"
  }; f

list-elbs =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_elb_list
  }; f

list-elb-listeners =
  !f() {

    . $P6_DFZ_SRC_P6M7G8_DIR/p6aws/lib/cli/cli.sh
    p6_aws_cli_qload $P6_DFZ_SRC_P6M7G8_DIR

    p6_aws_svc_ec2_elb_listeners_list "$@"
  }; f

# albs
# alb listeners
# alb rules
# target groups

# XXX: refactor below
list-caches =
  !f() {
     aws --output text elasticache describe-cache-clusters --query "CacheClusters[].[CacheClusterStatus, PreferredAvailabilityZone, CacheNodeType, EngineVersion, Engine, CacheSubnetGroupName, ConfigurationEndpoint.Address]"
  }; f

poll-last-cft =
  !f() {
    local stack_name=$(aws list-cfts | awk -v k=$USER '/_IN_/ {print $3}' | head -1)
    if [ -n "$stack_name" ]; then
	  aws list-cft-events $stack_name
    fi
  }; f

list-cft-events =
  !f() {
    local done=
    while [ -z "$done" ]; do
	echo "=====> `date`"
	aws --output text cloudformation describe-stack-events --stack-name $1 --query "StackEvents[].[ResourceStatus, ResourceType, PhysicalResourceId]"

	local output=$(aws --output text cloudformation describe-stack-events --stack-name $1 --query "StackEvents[].[ResourceStatus, ResourceType, PhysicalResourceId]")
	done=$(echo $output | grep "^CREATE_COMPLETE AWS::CloudFormation::Stack")
	sleep 5
    done
  }; f

list-rdss =
  !f() {
    aws --output text rds describe-db-instances --query "DBInstances[].[DBInstanceClass, AvailabilityZone, MultiAZ, EngineVersion, DBInstanceStatus, join(',', DBSubnetGroup.Subnets[].SubnetIdentifier), join(',', DBSubnetGroup.Subnets[].SubnetAvailabilityZone.Name), Engine, DBParameterGroups[0].DBParameterGroupName, OptionGroupMemberships[0].OptionGroupName, DBInstanceIdentifier]"
  }; f

list-rds-snapshots =
  !f() {
    aws --output text rds describe-db-snapshots --query "DBSnapshots[].[VpcId, SnapshotCreateTime, AvailabilityZone, SnapshotType, Engine, EngineVersion, DBSnapshotIdentifier]"
  }; f

show-prefix =
  !f() {
    aws --output text ec2 describe-prefix-lists --query "PrefixLists[].[PrefixListId, PrefixListName, join(',', Cidrs[])]"
  }; f
